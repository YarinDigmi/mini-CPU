$date
	Sun Sep 28 09:29:02 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module alu_tb $end
$var wire 1 ! z $end
$var wire 8 " result [7:0] $end
$var wire 1 # ovf $end
$var wire 1 $ neg $end
$var wire 1 % cf $end
$var reg 8 & a [7:0] $end
$var reg 1 ' areset $end
$var reg 8 ( b [7:0] $end
$var reg 1 ) clk $end
$var reg 3 * op [2:0] $end
$scope module DUT $end
$var wire 8 + a [7:0] $end
$var wire 1 ' areset $end
$var wire 8 , b [7:0] $end
$var wire 1 ) clk $end
$var wire 3 - op [2:0] $end
$var wire 1 ! z $end
$var wire 8 . sub_res [7:0] $end
$var wire 1 $ neg $end
$var wire 8 / add_res [7:0] $end
$var parameter 32 0 ADDS $end
$var parameter 32 1 ADDU $end
$var parameter 32 2 AND $end
$var parameter 32 3 OR $end
$var parameter 32 4 SLL $end
$var parameter 32 5 SUBS $end
$var parameter 32 6 SUBU $end
$var parameter 32 7 XOR $end
$var reg 1 % cf $end
$var reg 1 # ovf $end
$var reg 8 8 result [7:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b110 7
b1 6
b11 5
b111 4
b101 3
b100 2
b0 1
b10 0
$end
#0
$dumpvars
b0 8
b0 /
b0 .
b0 -
b0 ,
b0 +
b0 *
0)
b0 (
1'
b0 &
0%
0$
0#
b0 "
1!
$end
#5
1)
#10
0)
#12
0'
#15
1)
#20
0)
#22
b111 (
b111 ,
b10011 /
b101 .
b1100 &
b1100 +
#25
0!
b10011 "
b10011 8
1)
#30
0)
#32
b1 (
b1 ,
b0 /
b11111110 .
b11111111 &
b11111111 +
#35
1%
1!
b0 "
b0 8
1)
#40
0)
#42
b110010 (
b110010 ,
b10101010 /
b1000110 .
b1111000 &
b1111000 +
b1 *
b1 -
#45
0!
b1000110 "
b1000110 8
1%
1)
#50
0)
#52
b1111000 (
b1111000 ,
b10101010 /
b10111010 .
b110010 &
b110010 +
#55
1$
0%
0!
b10111010 "
b10111010 8
1)
#60
0)
#62
b1 (
b1 ,
b10000000 /
b1111110 .
b1111111 &
b1111111 +
b10 *
b10 -
#65
1#
0!
b10000000 "
b10000000 8
1)
#70
0)
#72
b11110010 (
b11110010 ,
b11100111 /
b11 .
b11110101 &
b11110101 +
#75
0#
0!
b11100111 "
b11100111 8
1)
#80
0)
#82
b1100100 (
b1100100 ,
b0 /
b111000 .
b10011100 &
b10011100 +
b11 *
b11 -
#85
0$
1#
0!
b111000 "
b111000 8
1)
#90
0)
#92
b1010 (
b1010 ,
b11011111 /
b11001011 .
b11010101 &
b11010101 +
#95
1$
0#
0!
b11001011 "
b11001011 8
1)
#100
0)
#102
b1010111 (
b1010111 ,
b11110010 /
b1000100 .
b10011011 &
b10011011 +
b100 *
b100 -
#105
0$
0!
b10011 "
b10011 8
1)
#110
0)
#112
b101 *
b101 -
#115
1$
0!
b11011111 "
b11011111 8
1)
#120
0)
#122
b110 *
b110 -
#125
0!
b11001100 "
b11001100 8
1)
#130
0)
#132
b11111111 (
b11111111 ,
b11101111 /
b11110001 .
b11110000 &
b11110000 +
b111 *
b111 -
#135
1%
0!
b11100000 "
b11100000 8
1)
#140
0)
#145
1%
0!
b11100000 "
b11100000 8
1)
#150
0)
#152
