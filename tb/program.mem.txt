0000000000000000   // Initialization
0010010000010010   // 1. ADDI R1 = R0+18
0110010000000000   // 2. STORE R1, [0]
0010010010010010   // 3. ADDI R1 = R1+18
0110010001000000   // 4. STORE R1, [1]
0010010010011110   // 5. ADDI R1 = R1+30
0110010011000000   // 6. STORE R1, [3]
0010010010111110   // 7. ADDI R1 = R1+62
0110010110000000   // 8. STORE R1, [6]
0100010000000000   // 9. LOAD R1, [0]
0100100001000000   // 10. LOAD R2, [1]
0000110010100000   // 11. ADD R3 = R1+R2
0110110010000000   // 12. STORE R3 → [2]
0101000011000000   // 13. LOAD R4, [3]
0001010111000001   // 14. SUB  R5 = R3–R4
0111010100000000   // 15. STORE R5 → [4]
0011101010000101   // 16. ADDI R6 = R5+5
0111100101000000   // 17. STORE R6 → [5]
0101110110000000   // 18. LOAD R7, [6]
0000011101110100   // 19. XOR R1 = R6^R7
0110010111000000   // 20. STORE R1 → [7]
0000100011110011   // 21. OR  R2 = R1 OR R7
0110101000000000   // 22. STORE R2 → [8]
0000110101100010   // 23. AND R3 = R2 AND R6
0110111001000000   // 24. STORE R3 → [9]
0011000110000001   // 25. ADDI R4 = R3+1
0111001010000000   // 26. STORE R4 → [10]
0011011000000001   // 27. ADDI R5 = R4+1
0111011011000000   // 28. STORE R5 → [11]
1000001111100000   // 29. JUMP → 31
0000000000000000   // 30. NOTHING. Should be jumped
0011001000000011   // 31. ADDI R4 = R4 + 3
1101000001111100   // 32. BNEZ R4 → 31
1011000010001100   // 33. BEZ R4 → 35
0000000000000000   // 34. NOTHING. Should be jumped
0111111011000000   // 35. STORE R7 → [11]